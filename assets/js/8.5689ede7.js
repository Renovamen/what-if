(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{427:function(v,_,t){v.exports=t.p+"assets/img/tcp-3.a9e07f87.png"},428:function(v,_,t){v.exports=t.p+"assets/img/tcp-4.4b7cc955.png"},429:function(v,_,t){v.exports=t.p+"assets/img/http-req-msg-structure.5832cc77.png"},430:function(v,_,t){v.exports=t.p+"assets/img/http-res-msg-structure.5a603f40.png"},485:function(v,_,t){"use strict";t.r(_);var e=t(43),r=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"计算机网络"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络"}},[v._v("#")]),v._v(" 计算机网络")]),v._v(" "),e("h2",{attrs:{id:"tcp-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议"}},[v._v("#")]),v._v(" TCP 协议")]),v._v(" "),e("p",[v._v("全称 Transmission Control Protocol（传输控制协议）。")]),v._v(" "),e("ul",[e("li",[v._v("传输层协议")]),v._v(" "),e("li",[v._v("是有状态的长连接")]),v._v(" "),e("li",[v._v("是面向连接的，通信开始前需要先建立连接，结束后要释放连接")]),v._v(" "),e("li",[v._v("每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的（一对一）")]),v._v(" "),e("li",[v._v("提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复、并且按序到达")]),v._v(" "),e("li",[v._v("提供全双工通信，允许通信双方的应用进程在任何时候都能发送数据")]),v._v(" "),e("li",[v._v("面向字节流：应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序传下来的数据看成是一连串的无结构的字节流，接受后再把字节流组织成大小不等的数据块")])]),v._v(" "),e("h3",{attrs:{id:"各种术语"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#各种术语"}},[v._v("#")]),v._v(" 各种术语")]),v._v(" "),e("h4",{attrs:{id:"tcp-标志位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-标志位"}},[v._v("#")]),v._v(" TCP 标志位")]),v._v(" "),e("p",[v._v("TCP 标志位代表了当前请求的目的，共有六种：")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("SYN（synchronous）")]),v._v("： 发送/同步标志，用来建立连接，和 ACK 标志位搭配使用。A 请求与 B 建立连接时，"),e("code",[v._v("SYN=1，ACK=0")]),v._v("；B 确认与 A 建立连接时，"),e("code",[v._v("SYN=1，ACK=1")])]),v._v(" "),e("li",[e("strong",[v._v("ACK（acknowledgement）")]),v._v("：确认标志。当 "),e("code",[v._v("ACK=1")]),v._v(" 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 "),e("code",[v._v("ACK")]),v._v(" 置 1。")]),v._v(" "),e("li",[e("strong",[v._v("FIN（finish）")]),v._v("：结束标志，用来关闭一个 TCP 连接。当 "),e("code",[v._v("FIN=1")]),v._v(" 时，表示此报文段的发送方的数据已发送完毕，并要求关闭连接")]),v._v(" "),e("li",[e("strong",[v._v("PSH（push）")]),v._v("：表示推送操作，就是指数据包到达接收端以后，不对其进行队列处理，而是尽可能的将数据交给应用程序处理")]),v._v(" "),e("li",[e("strong",[v._v("RST（reset）")]),v._v("：重置复位标志，用于复位对应的 TCP 连接")]),v._v(" "),e("li",[e("strong",[v._v("URG（urgent）")]),v._v("：紧急标志，用于保证 TCP 连接不被中断，并且督促中间层设备尽快处理")])]),v._v(" "),e("h4",{attrs:{id:"序列号-sequence-number"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列号-sequence-number"}},[v._v("#")]),v._v(" 序列号（Sequence Number）")]),v._v(" "),e("p",[v._v("作用：记录发送数据包的顺序，接收方可以通过数据分段中的序列号来按照正常的顺序重组数据。")]),v._v(" "),e("p",[v._v("规则：")]),v._v(" "),e("ul",[e("li",[v._v("从初始序列号 "),e("code",[v._v("ISN")]),v._v("（Initial Sequence Number）开始")]),v._v(" "),e("li",[v._v("握手阶段，"),e("code",[v._v("[SYN]")]),v._v(" 包即使没有传送数据，也会消耗一个序列号。因此，建立连接后的序列号从 "),e("code",[v._v("ISN+1")]),v._v(" 开始")]),v._v(" "),e("li",[v._v("数据传输阶段，序列号 = 第一个报文段的序列号 + 已经发送的字节数\n"),e("ul",[e("li",[v._v("比如第一个报文段的序列号为 301，携带的数据长度为 100 字节，则下一个报文段的序列号为 401")]),v._v(" "),e("li",[v._v("如果某个报文段不携带数据，则不会消耗序列号，下一个报文段还是用相同的序列号发送")]),v._v(" "),e("li",[v._v("正常情况下，B 给 A 的确认号，就是 A 下一个报文段的序列号")])])]),v._v(" "),e("li",[v._v("挥手阶段，"),e("code",[v._v("[FIN/ACK]")]),v._v(" 包即使没有传送数据，也会消耗掉一个序列号")]),v._v(" "),e("li",[v._v("客户端三次握手第三步的 "),e("code",[v._v("[ACK]")]),v._v(" 包，和传输阶段的第一个报文段，有相同的序列号")])]),v._v(" "),e("h4",{attrs:{id:"确认号-acknowledge-number"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#确认号-acknowledge-number"}},[v._v("#")]),v._v(" 确认号（Acknowledge Number）")]),v._v(" "),e("p",[v._v("期望收到的下一个报文段的序列号。如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。")]),v._v(" "),e("p",[v._v("在 "),e("code",[v._v("ACK")]),v._v(" 置 1 时才有效。")]),v._v(" "),e("h4",{attrs:{id:"msl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#msl"}},[v._v("#")]),v._v(" MSL")]),v._v(" "),e("p",[v._v("全称 Maximum Segment Lifetime，可以译为“报文最大生存时间”，指任何报文在网络上能存在的最长时间（2 分钟），超过这个时间的报文将被丢弃。")]),v._v(" "),e("h3",{attrs:{id:"连接过程-三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连接过程-三次握手"}},[v._v("#")]),v._v(" 连接过程（三次握手）")]),v._v(" "),e("p",[v._v("TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。连接是通过三次握手进行初始化的，即在客户端和服务器之间交换三个 TCP 报文段。目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(427),alt:"tcp-3"}})]),v._v(" "),e("p",[v._v("最初，客户端 A和服务器 B 都处于 CLOSED 状态。然后 A 主动打开连接，B 被动打开连接。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("首先，B 处于 LISTEN 状态，等待客户端的连接请求")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第一次握手")]),v._v("：建立连接。客户端发送"),e("strong",[v._v("同步报文")]),v._v(" "),e("code",[v._v("[SYN]")]),v._v("，"),e("code",[v._v("SYN = 1")]),v._v("，初始序列号 "),e("code",[v._v("seq = x")]),v._v("（"),e("code",[v._v("x")]),v._v(" 是一个随机数）；然后，客户端进入 "),e("code",[v._v("SYN_SEND")]),v._v(" 状态，等待服务器确认")]),v._v(" "),e("p",[v._v("TCP 规定，"),e("code",[v._v("SYN = 1")]),v._v(" 的报文段不能携带数据，但还是要消耗掉一个序列号")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第二次握手")]),v._v("：服务器收到 "),e("code",[v._v("SYN")]),v._v(" 报文段，如果同意建立连接，则向 A 发送"),e("strong",[v._v("同步确认报文")]),v._v(" "),e("code",[v._v("[SYN/ACK]")]),v._v("："),e("code",[v._v("SYN = 1")]),v._v("，"),e("code",[v._v("ACK = 1")]),v._v("，确认号 "),e("code",[v._v("ack = x + 1")]),v._v("（"),e("code",[v._v("seq + 1")]),v._v("），同时设一个初始序列号 "),e("code",[v._v("seq = y")]),v._v("（"),e("code",[v._v("y")]),v._v(" 是一个随机数）；然后服务器进入 "),e("code",[v._v("SYN_RECV")]),v._v(" 状态")]),v._v(" "),e("p",[v._v("这个报文段不能携带数据，但也还是要消耗掉一个序列号")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第三次握手")]),v._v("：客户端收到服务器的确认后，置确认号 "),e("code",[v._v("ack = y + 1")]),v._v("，序号 "),e("code",[v._v("seq = x + 1")]),v._v("，"),e("code",[v._v("ACK = 1")]),v._v("，然后把这个"),e("strong",[v._v("确认报文")]),v._v(" "),e("code",[v._v("[ACK]")]),v._v(" 发给服务器。之后，客户端和服务器端都进入 "),e("code",[v._v("ESTABLISHED")]),v._v(" 状态")]),v._v(" "),e("p",[v._v("确认报文段可以携带数据。但如果不携带数据则不消耗序列号，这种情况下，下一个报文段的序号仍是 "),e("code",[v._v("seq = x + 1")])])])]),v._v(" "),e("h3",{attrs:{id:"为什么要三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手"}},[v._v("#")]),v._v(" 为什么要三次握手")]),v._v(" "),e("h4",{attrs:{id:"为什么不两次"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么不两次"}},[v._v("#")]),v._v(" 为什么不两次")]),v._v(" "),e("p",[v._v("防止已失效的连接请求突然又到达了服务器，让服务器错误建立连接。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("举个栗子")]),v._v(" "),e("p",[v._v("A 发出的一个连接请求报文段长时间滞留，以致于延误到连接释放以后的某个时间段才到达 B。B 收到这个失效的链接请求报文段后，误以为 A 又发出一次新的连接请求。于是就向 A 发出确认报文段，同意建立连接。")]),v._v(" "),e("p",[v._v("如果不进行第三次握手，B 发出确认报文后就认为新的连接已经建立了，并一直等待 A 发来数据，于是 B 的许多资源就这样白白浪费了。如果采用了三次握手，由于 A 实际上并没有发出建立连接请求，所以不会理 B 的确认，也不会向 B 发送数据。B 由于收不到确认，就知道 A 并没有要求建立连接。")])]),v._v(" "),e("h4",{attrs:{id:"为什么不四次或更多"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么不四次或更多"}},[v._v("#")]),v._v(" 为什么不四次或更多")]),v._v(" "),e("p",[v._v("四次或更多的通信次数也可以达到目的，但三次是建立连接所需要的最小次数：")]),v._v(" "),e("ul",[e("li",[v._v("第一次握手：服务器确认“服务器收、客户端发”正常")]),v._v(" "),e("li",[v._v("第二次握手：客户端确认“客户端发、客户端收、服务器收、服务器发”正常，客户端认为连接已建立")]),v._v(" "),e("li",[v._v("第三次握手：服务器确认“服务器发、客户端收”正常，此时双方均建立连接，可以正常通信")])]),v._v(" "),e("p",[v._v("的确，A 发出 "),e("code",[v._v("[ACK]")]),v._v(" 报文后（第三次）在没有收到 B 的确认的情况下就已经进入了连接状态，那如果这个 "),e("code",[v._v("[ACK]")]),v._v(" 报文丢失或滞留了，也还是会出问题。但完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务器已经可以确认双方的通信状况，即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。")]),v._v(" "),e("h3",{attrs:{id:"断开链接-四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断开链接-四次挥手"}},[v._v("#")]),v._v(" 断开链接（四次挥手）")]),v._v(" "),e("p",[v._v("数据传输完毕后，需要释放 TCP 连接（通信双方都可以释放连接）。")]),v._v(" "),e("p",[e("img",{attrs:{src:t(428),alt:"tcp-4"}})]),v._v(" "),e("ul",[e("li",[e("p",[e("strong",[v._v("第一次挥手")]),v._v("：A 发出"),e("strong",[v._v("连接释放报文")]),v._v(" "),e("code",[v._v("[FIN/ACK]")]),v._v("："),e("code",[v._v("FIN = 1")]),v._v("，"),e("code",[v._v("ACK = 1")]),v._v("，"),e("code",[v._v("seq = u")]),v._v("（= A 上次发送的报文的最后一个字节的序列号 + 1）；然后停止再发送数据，进入 "),e("code",[v._v("FIN-WAIT-1")]),v._v(" 状态，等待 B 的确认")]),v._v(" "),e("p",[v._v("TCP 规定，"),e("code",[v._v("FIN = 1")]),v._v(" 的报文段即使不携带数据，也将消耗掉一个序列号")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第二次挥手")]),v._v("：B 收到 A 的连接释放报文后，发出"),e("strong",[v._v("确认报文")]),v._v(" "),e("code",[v._v("[ACK]")]),v._v("："),e("code",[v._v("ACK = 1")]),v._v("，"),e("code",[v._v("seq = k")]),v._v("（= 即 B 上次发送的报文的最后一个字节的序号 + 1），"),e("code",[v._v("ack = u + 1")]),v._v("；然后 B 进入 "),e("code",[v._v("CLOSE-WAIT")]),v._v(" 状态")]),v._v(" "),e("p",[v._v("这时的 TCP 连接处于半关闭状态，即 A 已经没有数据要发送了，A 到 B 的连接释放了，但 B 到 A 的连接还没有释放，B 可能还有数据要发，这个状态可能会持续一段时间。")]),v._v(" "),e("p",[e("strong",[v._v("所以第二次跟第三次挥手不能合并")])]),v._v(" "),e("p",[v._v("A 收到来自 B 的确认后，进入 "),e("code",[v._v("FIN-WAIT-2")]),v._v(" 状态，等待 B 发出的连接释放报文")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第三次挥手")]),v._v("：B 发出"),e("strong",[v._v("连接释放报文")]),v._v(" "),e("code",[v._v("[FIN/ACK]")]),v._v("："),e("code",[v._v("FIN = 1")]),v._v("，"),e("code",[v._v("seq = w")]),v._v("（= 即 B 上次发送的报文的最后一个字节的序号 + 1，如果半关闭状态时，服务端没有发送数据，则 "),e("code",[v._v("w = k")]),v._v("）；然后停止再发送数据，进入 "),e("code",[v._v("LAS_ACK")]),v._v(" 状态，等待 A 的确认")]),v._v(" "),e("p",[v._v("同样，这个报文即使不携带数据，依然还是要消耗掉一个序列号")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("第四次挥手")]),v._v("：A 收到 B 的连接释放报文后，发出"),e("strong",[v._v("确认报文")]),v._v(" "),e("code",[v._v("[ACK]")]),v._v("："),e("code",[v._v("ACK = 1")]),v._v("，"),e("code",[v._v("seq = u + 1")]),v._v("（与第二次挥手相同，因为这段时间 A 没有发送数据），"),e("code",[v._v("ack = w + 1")])])]),v._v(" "),e("li",[e("p",[v._v("然后 A 进入 "),e("code",[v._v("TIME-WAIT")]),v._v(" 状态，经过 2 * "),e("a",{attrs:{href:"#msl"}},[v._v("MSL")]),v._v("（2 * 2min = 4min）的时间后，A 进入 "),e("code",[v._v("CLOSED")]),v._v(" 状态。而 B 只要收到 A 发出的确认，就立即进入 "),e("code",[v._v("CLOSED")]),v._v(" 状态。所以 B 结束 TCP 连接的时间要早于 A")])])]),v._v(" "),e("h3",{attrs:{id:"为什么要-time-wait"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要-time-wait"}},[v._v("#")]),v._v(" 为什么要 TIME-WAIT")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("第四次挥手时，A 发送的最后一个确认报文 "),e("code",[v._v("[ACK]")]),v._v(" 不一定能到达 B，这是 B 会超时重传连接释放报文 "),e("code",[v._v("[FIN/ACK]")]),v._v("，此时如果 A 已经断开了连接，就无法响应 B 的二次请求，这样 B 迟迟收不到确认报文，就无法正常断开连接。")]),v._v(" "),e("p",[v._v("2MSL = A 的 "),e("code",[v._v("[ACK]")]),v._v(" 报文 1MSL 超时 + B 的 "),e("code",[v._v("[FIN/ACK]")]),v._v(" 报文 1MSL 传输")])]),v._v(" "),e("li",[e("p",[v._v("TCP 要求在 2MSL 内不使用相同的序列号。A 在发送完最后一个 "),e("code",[v._v("[ACK]")]),v._v(" 报文后，再经过时间 2MSL，就可以保证本连接持续的时间内产生的所有报文都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段，或者即使收到这些过时的报文，也可以不处理它。")])])]),v._v(" "),e("h3",{attrs:{id:"为什么要四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要四次挥手"}},[v._v("#")]),v._v(" 为什么要四次挥手")]),v._v(" "),e("p",[v._v("TCP 是全双工的，一方关闭连接后，另一方还可以继续发送数据。所以四次挥手，将断开连接分成两个独立的过程。")]),v._v(" "),e("h2",{attrs:{id:"http-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-协议"}},[v._v("#")]),v._v(" HTTP 协议")]),v._v(" "),e("p",[v._v("全称 HyperText Transfer Protocol（超文本传输协议）。超文本指带标记的文本，刚开始指 HTML，现在表单、JSON、XML、文件什么的都可以传。")]),v._v(" "),e("p",[v._v("应用层协议，通过 TCP 协议发送数据。")]),v._v(" "),e("h3",{attrs:{id:"http-请求方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方法"}},[v._v("#")]),v._v(" HTTP 请求方法")]),v._v(" "),e("p",[v._v("请求方法表明了要对给定资源执行的操作，每一个请求方法都实现了不同的语义。")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("GET")]),v._v("：获取服务器的指定资源")]),v._v(" "),e("li",[e("strong",[v._v("POST")]),v._v("：提交资源到服务器 / 在服务器新建资源")]),v._v(" "),e("li",[e("strong",[v._v("HEAD")]),v._v("：和 GET 一样，都是获取服务器指定资源的请求。不同的是服务器只会返回 Header 而不会返回 Body，常用于确认 URI 的有效性及资源更新的日期时间等。典型应用：下载文件时，先通过 HEAD 方法获取 Header，从中读取文件大小 "),e("code",[v._v("Content-Length")]),v._v("，然后再配合 "),e("code",[v._v("Range")]),v._v(" 字段分片下载服务器资源")]),v._v(" "),e("li",[e("strong",[v._v("PUT")]),v._v("：替换整个目标资源。由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法")]),v._v(" "),e("li",[e("strong",[v._v("PATCH")]),v._v("：替换目标资源的部分内容")]),v._v(" "),e("li",[e("strong",[v._v("DELETE")]),v._v("：删除指定的资源。与 PUT 功能相反，并且同样不带验证机制")]),v._v(" "),e("li",[e("strong",[v._v("OPTIONS")]),v._v("：查询指定的 URL 能够支持的方法，会返回类似于 "),e("code",[v._v("Allow: GET, POST, HEAD, OPTIONS")]),v._v(" 的内容")]),v._v(" "),e("li",[e("strong",[v._v("CONNECT")])]),v._v(" "),e("li",[e("strong",[v._v("TRACE")])])]),v._v(" "),e("p",[e("strong",[v._v("幂等的")]),v._v("：幂等的 HTTP 方法，指同样的请求执行一次与执行多次的效果是一样的，即没有副作用")]),v._v(" "),e("ul",[e("li",[v._v("常见的幂等方法：GET、HEAD、PUT、DELETE、OPTIONS")]),v._v(" "),e("li",[v._v("常见的非幂等方法：POST")])]),v._v(" "),e("p",[e("strong",[v._v("安全的")]),v._v("：安全的 HTTP 方法，指该方法对服务器进行只读操作，不会修改服务器数据")]),v._v(" "),e("ul",[e("li",[v._v("常见的安全方法：GET、HEAD、OPTIONS")]),v._v(" "),e("li",[v._v("常见的不安全方法：PUT、DELETE、POST")])]),v._v(" "),e("p",[v._v("所有安全的方法都是幂等的。有些不安全的方法如 DELETE 是幂等的（而 PUT 和 DELETE 则不是）")]),v._v(" "),e("p",[e("strong",[v._v("可缓存的")]),v._v("：GET、HEAD")]),v._v(" "),e("h3",{attrs:{id:"get-和-post-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-区别"}},[v._v("#")]),v._v(" GET 和 POST 区别")]),v._v(" "),e("p",[v._v("大部分是从"),e("a",{attrs:{href:"https://imageslr.com/2020/http.html#get-%E5%92%8C-post-%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[v._v("这里")]),v._v("抄过来的。")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th"),v._v(" "),e("th",[v._v("GET")]),v._v(" "),e("th",[v._v("POST")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("应用")]),v._v(" "),e("td",[v._v("获取服务器的指定数据")]),v._v(" "),e("td",[v._v("添加 / 修改服务器的数据")])]),v._v(" "),e("tr",[e("td",[v._v("历史记录 / 书签")]),v._v(" "),e("td",[v._v("可保留在浏览器历史记录中或收藏为书签")]),v._v(" "),e("td",[v._v("不可以")])]),v._v(" "),e("tr",[e("td",[v._v("缓存")]),v._v(" "),e("td",[v._v("会被浏览器主动缓存")]),v._v(" "),e("td",[v._v("不会，除非手动设置")])]),v._v(" "),e("tr",[e("td",[v._v("幂等")]),v._v(" "),e("td",[v._v("幂等，不会改变服务器上的资源")]),v._v(" "),e("td",[v._v("非幂等，会改变服务器资源")])]),v._v(" "),e("tr",[e("td",[v._v("后退 / 刷新")]),v._v(" "),e("td",[v._v("后退或刷新时，GET 是无害的")]),v._v(" "),e("td",[v._v("后退或刷新时，POST 会重新提交表单")])]),v._v(" "),e("tr",[e("td",[v._v("参数位置")]),v._v(" "),e("td",[v._v("query 中（直接明文暴露在链接中）")]),v._v(" "),e("td",[v._v("query 或 body 中")])]),v._v(" "),e("tr",[e("td",[v._v("参数类型")]),v._v(" "),e("td",[v._v("ASCII 字符")]),v._v(" "),e("td",[v._v("无限制")])]),v._v(" "),e("tr",[e("td",[v._v("参数长度")]),v._v(" "),e("td",[v._v("有限制（被浏览器和服务器限制）")]),v._v(" "),e("td",[v._v("无限制")])])])]),v._v(" "),e("h3",{attrs:{id:"为什么-get-请求传参长度有限制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-get-请求传参长度有限制"}},[v._v("#")]),v._v(" 为什么 GET 请求传参长度有限制")]),v._v(" "),e("p",[v._v("HTTP 协议并没有限制 GET / POST 的请求长度。这个限制来源与浏览器或 WEB 服务器，浏览器或 WEB 服务器限制了 URI 的长度。")]),v._v(" "),e("p",[v._v("不同的浏览器和 WEB 服务器限制的最大长度不一样。如果要支持 IE，则最大长度为 2083 字节，如果只支持 Chrome，则最大长度为 8182 字节。")]),v._v(" "),e("h3",{attrs:{id:"http-状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[v._v("#")]),v._v(" HTTP 状态码")]),v._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status",target:"_blank",rel:"noopener noreferrer"}},[v._v("MDN：HTTP 响应代码")])]),v._v(" "),e("h4",{attrs:{id:"信息响应-100-199"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#信息响应-100-199"}},[v._v("#")]),v._v(" 信息响应（100 - 199）")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("状态码")]),v._v(" "),e("th",[v._v("名称")]),v._v(" "),e("th",[v._v("描述")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("100")]),v._v(" "),e("td",[v._v("Continue / 继续")]),v._v(" "),e("td",[v._v("到目前为止都很正常，客户端可以继续其请求")])]),v._v(" "),e("tr",[e("td",[v._v("101")]),v._v(" "),e("td",[v._v("Switching Protocols / 切换协议")]),v._v(" "),e("td",[v._v("服务器根据客户端的请求切换协议，只能切换到更高级的协议（如，切换到 HTTP 的新版本协议）")])])])]),v._v(" "),e("h4",{attrs:{id:"成功响应-200-299"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成功响应-200-299"}},[v._v("#")]),v._v(" 成功响应（200 – 299）")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("状态码")]),v._v(" "),e("th",[v._v("名称")]),v._v(" "),e("th",[v._v("描述")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("200")]),v._v(" "),e("td",[v._v("OK / 请求成功")]),v._v(" "),e("td",[v._v("通常用于 GET 与 POST 请求")])]),v._v(" "),e("tr",[e("td",[v._v("201")]),v._v(" "),e("td",[v._v("Created / 已创建")]),v._v(" "),e("td",[v._v("该请求已成功，并因此创建了一个新的资源。通常是在 POST 请求后返回的响应")])]),v._v(" "),e("tr",[e("td",[v._v("202")]),v._v(" "),e("td",[v._v("Accepted / 已接受")]),v._v(" "),e("td",[v._v("已接受请求，但还未处理完成")])]),v._v(" "),e("tr",[e("td",[v._v("204")]),v._v(" "),e("td",[v._v("No Content / 无内容")]),v._v(" "),e("td",[v._v("请求已被服务器成功处理，但拒绝对 GET / POST 请求的内容进行返回，即返回的响应报文不包含实体的主体部分。通常用于只需要从客户端往服务器发送信息，而不需要返回数据时")])]),v._v(" "),e("tr",[e("td",[v._v("206")]),v._v(" "),e("td",[v._v("Partial Content / 部分内容")]),v._v(" "),e("td",[v._v("服务器成功处理了部分 GET 请求。该请求必须包含 "),e("code",[v._v("Range")]),v._v(" 头信息来指示客户端希望得到的内容范围。通常用于实现断点续传，或者将一个大文档分为多个片段然后并行下载")])])])]),v._v(" "),e("h4",{attrs:{id:"重定向-300-399"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重定向-300-399"}},[v._v("#")]),v._v(" 重定向（300 – 399）")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("301、302、307 重定向原理")]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("定义")]),v._v("：服务器给浏览器返回一个状态码为 301 或 302 的重定向响应，将旧地址重定向到一个新的地址。浏览器会自动跳转到 Location 域指明的 URL，需要的所有信息都在 HTTP 头部，而响应体一般是空的。")]),v._v(" "),e("li",[e("strong",[v._v("目的")]),v._v("：如果一个页面有两个地址，搜索引擎会认为他们是两个网站，导致每个地址的链接成绩都减少，从而降低排名。而 301 重定向会让搜索引擎把两个地址归到同一个网站的排名下，从而不影响网站的排名。")])])]),v._v(" "),e("li",[e("strong",[v._v("304 缓存机制")]),v._v("：见 "),e("a",{attrs:{href:"#http-%E7%BC%93%E5%AD%98"}},[v._v("HTTP 缓存")])])]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("状态码")]),v._v(" "),e("th",[v._v("名称")]),v._v(" "),e("th",[v._v("描述")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("301")]),v._v(" "),e("td",[v._v("Moved Permanently / 永久移动")]),v._v(" "),e("td",[v._v("永久重定向。旧地址的资源已被永久移除移动到新地址，今后任何新的请求都应使用新的地址代替。常见场景：永久更换网站地址或域名")])]),v._v(" "),e("tr",[e("td",[v._v("302")]),v._v(" "),e("td",[v._v("Found / 临时移动")]),v._v(" "),e("td",[v._v("临时重定向。资源只是临时被移动，这个重定向只是临时从旧地址跳转到新地址，客户端应继续向旧地址发送以后的请求。常见场景：网站临时换地址、将所有 HTTP 流量重定向到 HTTPS")])]),v._v(" "),e("tr",[e("td",[v._v("303")]),v._v(" "),e("td",[v._v("See Other / 查看其它地址")]),v._v(" "),e("td",[v._v("与 301 类似，但要求客户端应使用 GET 方法获取资源")])]),v._v(" "),e("tr",[e("td",[v._v("304")]),v._v(" "),e("td",[v._v("Not Modified / 未修改")]),v._v(" "),e("td",[v._v("所请求的资源未修改。客户端发送了一个带条件的 GET 请求（客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源）且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器返回此状态码。304 响应不含消息体，即不会返回任何资源，因此始终以消息头后的第一个空行结尾")])]),v._v(" "),e("tr",[e("td",[v._v("305")]),v._v(" "),e("td",[v._v("Use Proxy / 使用代理")]),v._v(" "),e("td",[v._v("被请求的资源必须通过指定的代理才能被访问")])]),v._v(" "),e("tr",[e("td",[v._v("307")]),v._v(" "),e("td",[v._v("Temporary Redirect / 临时重定向")]),v._v(" "),e("td",[v._v("与 302 类似，但要求客户端使用 GET 方法获取资源")])])])]),v._v(" "),e("h4",{attrs:{id:"客户端错误-400-499"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端错误-400-499"}},[v._v("#")]),v._v(" 客户端错误（400 – 499）")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("状态码")]),v._v(" "),e("th",[v._v("名称")]),v._v(" "),e("th",[v._v("描述")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("400")]),v._v(" "),e("td",[v._v("Bad Request")]),v._v(" "),e("td",[v._v("客户端请求的语义有误，无法被服务器理解 / 请求参数有误")])]),v._v(" "),e("tr",[e("td",[v._v("401")]),v._v(" "),e("td",[v._v("Unauthorized")]),v._v(" "),e("td",[v._v("当前请求需要用户的身份认证")])]),v._v(" "),e("tr",[e("td",[v._v("403")]),v._v(" "),e("td",[v._v("Forbidden")]),v._v(" "),e("td",[v._v("服务器已经理解请求客户端的请求，但是拒绝执行它。与 401 不同的是，提供了身份验证也没有用。比如你的 IP 被服务器拉黑了")])]),v._v(" "),e("tr",[e("td",[v._v("404")]),v._v(" "),e("td",[v._v("Not Found")]),v._v(" "),e("td",[v._v("服务器无法找到客户端请求的资源，并且不知道这是否是永久的。如果服务器能够确定这是永久的，应使用 410 状态码")])]),v._v(" "),e("tr",[e("td",[v._v("408")]),v._v(" "),e("td",[v._v("Request Time-out / 请求超时")]),v._v(" "),e("td",[v._v("服务器等待客户端发送的请求时间过长，超时")])]),v._v(" "),e("tr",[e("td",[v._v("410")]),v._v(" "),e("td",[v._v("Gone")]),v._v(" "),e("td",[v._v("客户端请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。不同于 404，410 用于服务器端知道客户端所请求的资源曾经存在，但现在已经永久不存在了的情况")])])])]),v._v(" "),e("h4",{attrs:{id:"服务器错误-500-599"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#服务器错误-500-599"}},[v._v("#")]),v._v(" 服务器错误 （500 – 599）")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("状态码")]),v._v(" "),e("th",[v._v("名称")]),v._v(" "),e("th",[v._v("描述")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("500")]),v._v(" "),e("td",[v._v("Internal Server Error / 服务器内部错误")]),v._v(" "),e("td",[v._v("服务器遇到了不知道如何处理的情况")])]),v._v(" "),e("tr",[e("td",[v._v("501")]),v._v(" "),e("td",[v._v("Not Implemented")]),v._v(" "),e("td",[v._v("服务器不支持请求方法。只有 GET 和 HEAD 是要求服务器支持的，它们一定不会返回 501")])]),v._v(" "),e("tr",[e("td",[v._v("502")]),v._v(" "),e("td",[v._v("Bad Gateway / 网关错误")]),v._v(" "),e("td",[v._v("作为网关或者工作的服务器尝需要从上游服务器（如 tomcat、php-fpm）得到一个处理这个请求的响应，但收到的响应是无效的")])]),v._v(" "),e("tr",[e("td",[v._v("503")]),v._v(" "),e("td",[v._v("Service Unavailable")]),v._v(" "),e("td",[v._v("服务器暂时的无法处理客户端的请求，常见原因是服务器因为超载或系统维护而停机")])])])]),v._v(" "),e("h3",{attrs:{id:"http-首部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-首部"}},[v._v("#")]),v._v(" HTTP 首部")]),v._v(" "),e("p",[v._v("有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段，各种首部字段及其含义见"),e("a",{attrs:{href:"https://github.com/CyC2018/CS-Notes/blob/master/notes/HTTP.md#%E5%9B%9Bhttp-%E9%A6%96%E9%83%A8",target:"_blank",rel:"noopener noreferrer"}},[v._v("这里")]),v._v("。")]),v._v(" "),e("h3",{attrs:{id:"http-报文结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-报文结构"}},[v._v("#")]),v._v(" HTTP 报文结构")]),v._v(" "),e("h4",{attrs:{id:"请求报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求报文"}},[v._v("#")]),v._v(" 请求报文")]),v._v(" "),e("p",[v._v("HTTP 请求报文由请求行（request line）、请求头部（header）、空行和请求数据 4 个部分组成：")]),v._v(" "),e("img",{attrs:{src:t(429),width:"450px",alt:"http-req-msg-structure"}}),v._v(" "),e("h5",{attrs:{id:"请求行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求行"}},[v._v("#")]),v._v(" 请求行")]),v._v(" "),e("p",[v._v("分为三个部分：请求方法、请求地址和协议版本：")]),v._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"#http-%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95"}},[e("strong",[v._v("请求方法")])]),v._v("：最常的是 GET 和 POST")])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("请求地址")]),v._v("（URL，统一资源定位符）：一种自愿位置的抽象唯一识别方法")]),v._v(" "),e("p",[v._v("组成："),e("code",[v._v("<协议>://<主机>:<端口>/<路径>")]),v._v("，端口和路径有时可以省略（HTTP 默认端口号是 80）")]),v._v(" "),e("p",[v._v("有时会带参数："),e("code",[v._v("<协议>://<主机>:<端口>/<路径>?key1=value1&key2=value2")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("协议版本")]),v._v("：格式为 "),e("code",[v._v("HTTP/主版本号.次版本号")]),v._v("，常用的有 HTTP/1.0 和 HTTP/1.1")])])]),v._v(" "),e("h5",{attrs:{id:"请求头"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求头"}},[v._v("#")]),v._v(" 请求头")]),v._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers",target:"_blank",rel:"noopener noreferrer"}},[v._v("MDN: HTTP Headers")])]),v._v(" "),e("p",[v._v("请求头为请求报文添加了一些附加信息。一个请求头由名称（不区分大小写）后跟一个冒号 "),e("code",[v._v(":")]),v._v("，冒号后跟具体的值（不带换行符）组成，值前面的引导空白会被忽略。")]),v._v(" "),e("p",[v._v("请求头必不可少。")]),v._v(" "),e("p",[v._v("常见的请求头字段名：")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("字段名")]),v._v(" "),e("th",[v._v("说明")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("Host")]),v._v(" "),e("td",[v._v("接受请求的服务器地址，可以是 "),e("code",[v._v("IP:端口号")]),v._v("，也可以是域名")])]),v._v(" "),e("tr",[e("td",[v._v("User-Agent")]),v._v(" "),e("td",[v._v("发送请求的应用程序名称")])]),v._v(" "),e("tr",[e("td",[v._v("Connection")]),v._v(" "),e("td",[v._v("指定与连接相关的属性，如 "),e("code",[v._v("Connection:Keep-Alive")])])]),v._v(" "),e("tr",[e("td",[v._v("Accept-Charset")]),v._v(" "),e("td",[v._v("客户端支持的字符集")])]),v._v(" "),e("tr",[e("td",[v._v("Accept-Encoding")]),v._v(" "),e("td",[v._v("客户端支持的压缩方法")])]),v._v(" "),e("tr",[e("td",[v._v("Accept-Language")]),v._v(" "),e("td",[v._v("客户端期望的页面语言")])])])]),v._v(" "),e("h5",{attrs:{id:"空行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[v._v("#")]),v._v(" 空行")]),v._v(" "),e("p",[v._v("请求头的最后会有一个空行，表示请求头结束，接下来为请求数据。")]),v._v(" "),e("h5",{attrs:{id:"请求数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求数据"}},[v._v("#")]),v._v(" 请求数据")]),v._v(" "),e("p",[v._v("可选，比如 GET 请求就没有请求数据。")]),v._v(" "),e("h4",{attrs:{id:"响应报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应报文"}},[v._v("#")]),v._v(" 响应报文")]),v._v(" "),e("img",{attrs:{src:t(430),width:"500px",alt:"http-res-msg-structure"}}),v._v(" "),e("p",[v._v("HTTP 响应报文主要由状态行、响应头部、空行以及响应数据组成。")]),v._v(" "),e("h5",{attrs:{id:"状态行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#状态行"}},[v._v("#")]),v._v(" 状态行")]),v._v(" "),e("p",[v._v("分为三个部分：协议版本，状态码，状态码描述。协议版本与请求报文一致，状态码见"),e("a",{attrs:{href:"#http-%E7%8A%B6%E6%80%81%E7%A0%81"}},[v._v("上一节")]),v._v("，状态码描述是对状态码的简单描述。")]),v._v(" "),e("h5",{attrs:{id:"响应头部"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应头部"}},[v._v("#")]),v._v(" 响应头部")]),v._v(" "),e("p",[v._v("与请求头部类似，为响应报文添加了一些附加信息。常见的响应头字段名：")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("字段名")]),v._v(" "),e("th",[v._v("说明")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("Server")]),v._v(" "),e("td",[v._v("服务器应用程序软件的名称和版本")])]),v._v(" "),e("tr",[e("td",[v._v("Content-Type")]),v._v(" "),e("td",[v._v("响应正文的媒体类型")])]),v._v(" "),e("tr",[e("td",[v._v("Content-Encoding")]),v._v(" "),e("td",[v._v("响应正文的编码方式")])]),v._v(" "),e("tr",[e("td",[v._v("Content-Language")]),v._v(" "),e("td",[v._v("响应正文所使用的语言")])])])]),v._v(" "),e("h5",{attrs:{id:"空行-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空行-2"}},[v._v("#")]),v._v(" 空行")]),v._v(" "),e("p",[v._v("和请求头一样，响应头的最后会有一个空行，表示响应头结束，接下来为响应数据。")]),v._v(" "),e("h5",{attrs:{id:"响应数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#响应数据"}},[v._v("#")]),v._v(" 响应数据")]),v._v(" "),e("p",[v._v("用于存放需要返回给客户端的数据。")]),v._v(" "),e("h3",{attrs:{id:"http-1-0-2-0-3-0"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-2-0-3-0"}},[v._v("#")]),v._v(" HTTP 1.0/2.0/3.0")]),v._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://imageslr.com/2020/http.html#http10http11http20-%E7%9A%84%E5%8F%98%E5%8C%96",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP/1.0、HTTP/1.1、HTTP/2.0 的变化")])]),v._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/490",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP/2 对比 HTTP/1.1，特性是什么？是如何解决队头阻塞与压缩头部的？")])]),v._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/492",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTTP/3 新特性，为什么选择使用 UDP 协议？")])])]),v._v(" "),e("h3",{attrs:{id:"为什么-http-1-1-不能实现多路复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么-http-1-1-不能实现多路复用"}},[v._v("#")]),v._v(" 为什么 HTTP/1.1 不能实现多路复用")]),v._v(" "),e("p",[v._v("HTTP/2.0 将数据块分成了帧（frame），把帧以数据流（stream）的形式发送。每个帧会有一个该帧属于哪个流的标识，接收端在收到后可以将这些帧重新组装成数据块，从而在一个 TCP 连接中可以存在多条流。")]),v._v(" "),e("p",[v._v("而 HTTP/1.1 不是二进制传输，而是通过文本进行传输，也没有“流”的概念。如果使用多路复用传输数据，接收端在收到响应后，并不能区分多个响应分别对应的请求，所以无法将多个响应的结果重新进行组装，也就实现不了多路复用。")]),v._v(" "),e("h3",{attrs:{id:"http-缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[v._v("#")]),v._v(" HTTP 缓存")]),v._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/lgwebdream/FE-Interview/issues/14",target:"_blank",rel:"noopener noreferrer"}},[v._v("Http 缓存策略，有什么区别，分别解决了什么问题")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);